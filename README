         ----==== Orp: in-place binary code randomizer ====----

Orp is an in-place binary code randomizer for the x86 architecture. For more
information about it you can read the paper in 'doc/smashing.pdf' which was
published in the Proceedings of the 33rd IEEE Symposium on Security & Privacy
(S&P 2012). On top of the previous IPR techniques, new transformation is added,
displacement that moves code snippets that contain pre-discovered gadgets to
a new section called '.ropf' during binary instrumentation. For more details,
read the paper in 'doc/disp.pdf' which has been published in the 16th ACM
Asia Conference on Computer and Communications Security (ASIACCS 2016)

Here you will find information on how to install and use it.

If you have any questions or you want to report bugs or feature requests, please
sent us an email at vpappas@cs.columbia.edu (for IPR techniques) or
at hykoo@cs.stonybrook.edu (for displacement technique)


- Prerequisites
  
  1. Compiler
      Orp contains a modified version of the Libdasm library that you need to
      compile. Install the full .NET Framework 4 from:
      http://www.microsoft.com/en-us/download/details.aspx?id=17851
      and then install the Microsoft Windows SDK 7.1 from:
      http://www.microsoft.com/en-us/download/details.aspx?id=8279
      (make sure you choose the option "Visual C++ Compilers").

  2. Python
      Install the 32-bit version of Python 2.7 from:
      http://www.python.org/ftp/python/2.7.3/python-2.7.3.msi
      It is also possible to use the 64-bit version, but some steps bellow may be
      slightly different. If you already have Python installed from Cygwin, you may
      have some issues when running the examples later.

  3. Libdasm (modified)
      Start a Windows SDK command prompt and change directory to
      'orp-X/libdasm-1.5_orp/pydasm'. Then change the build environment to x86
      (skip if 64-bit Python is used):
       > SetEnv.cmd /x86
      Configure Python distutils to use Windows SDK instead of Visual Studio:
       > set DISTUTILS_USE_SDK=1
       > set MSSdk=1
      Compile and install the Python extension of libdasm:
       > python.exe setup.py build
       > python.exe setup.py install
      If python.exe is not found, either add it to PATH or use the absolute path.

  4. Install the Pygraph and PEfile Python libraries
      Download PEfile from:
      http://pefile.googlecode.com/files/pefile-1.2.10-114.zip
      Unzip, change directory to 'pefile-1.2.10-114' and install by executing:
       > python.exe setup.py install
      Download Pygraph from:
      http://python-graph.googlecode.com/files/python-graph-1.8.1.zip
      Unzip, change directory to python-graph/core and install by executing:
       > python.exe setup.py install
      Then, change directory to 'python-graph/dot' and install by executing:
       > python.exe setup.py install

  5. Install the Capstone module, a disassembly framework
      Download Capstone for python 2.7 from:
      http://www.capstone-engine.org/download.html
      Just install the executable file

  6. Miscellaneous stuff
      Download progressbar from:
      https://pypi.python.org/packages/source/p/progressbar/progressbar-2.3.tar.gz
      Unzip, untar the file, and install by executing:
       > python.exe setup.py install
      Or you may simply download and install it using pip if available:
       > pip install progressbar

- Test suite

  You can verify the installation by running the test suite located in the orp-X
  directory:
   > python test.py
  If everything is in place, you should see no errors. Otherwise, check that all
  the prerequisites are properly installed and try again. 


- Example usage

  There are two DLLs in the test directory for which the control flow graph
  (CFG) is also included. So, you can use Orp with them even if you don't have
  IDA Pro. Orp has five modes of operation:

  1. Randomize a given binary with [-r]
      Takes as input a binary (DLL or executable) and generates a randomized
      version. You can test that using the md5.dll:
       > python orp.py -r test\md5\md5.dll
      The randomized DLL will be located at test\md5\md5_patched-rand.dll and you
      can test it by running:
       > test\md5\main.exe test\md5\md5_patched-rand.dll

  2. Coverage evaluation with [-c]
      Extracts all the gadgets (instruction sequences that end in an indirect
      branch; at most five instructions in length) and then applies all the
      different randomization techniques. Example:
       > python orp.py -c test\md5\md5.dll
      After it finishes, a detailed report is shown.

  3. Exploit evaluation with [-e]
      Calculates the number of different randomized versions of the input DLL that
      break an exploit payload. The payload is given as a list of addresses in a
      Python file, having the same name as the input DLL with the addition of the
      '.payload.py' suffix. Currently, there is no exploit payloads for the included
      DLLs, so there is no easy way to test it if you don't have IDA Pro installed.

  4. Randomize a given binary with displacement only [-m]
      Takes as input a binary (DLL or executable) and generates a randomized one.
      IPR techniques will be ignored with this option. You can get a transformed
      binary, introducing a new section or .ropf. Example:
       > python orp.py -m test\md5\md5.dll
      You will obtain 'md5_ropf_final.dll' as output. You may end up with getting
      the '*_ropf.dll' instead. If you can't see '*_ropf_final.dll' then take the
      latter. For more details, look at the known issues below.

  5. Randomize a given binary with displacement for which IPR does not cover [-k]
      Exactly the same with 4th mode but considering displacement for the remaining
      gadgets that IPR has not been able to handle. You should be able to observe
      a new section (.ropf) as well.
       > python orp.py -k test\md5\md5.dll
      Both 4 and 5 options generate a detailed report including gadget information,
      binary header changes, coverage between IPR and displacement, and so forth.
      Check out the interesting figures in './stats/new_stats.csv'

  For a brief description, use -h option.


- Example output
    > python orp.py -k ./samples/md5/md5.dll
    Orp v0.69

    [1] Gathering codes and blocks...

    [2] Computing candidate gadgets...
        Discovered Gadgets in total: 2014
            Small(<5B) : 572 (28.4%)
            Unreachable: 157 (7.8%)
            Unintended : 1170 (58.09%)
        Gadget candidates to be broken or eliminated (no red): 1857
        Call preceded gadgets: 87 (4.32%), 1 (0.05%) in red

    [3] Organizing essential information...
        Functions: 173
        Blocks: 2032
        Opcodes: 10241

    [4] Simulating randomization...
        Found previous result and loaded...

    [5] Choosing the regions for displacement...
        Target gadgets to be broken: 1857 (100.0%)
        Checking regions:    100% |####################################| Time: 0:00:03
        Updating references: 100% |####################################| Time: 0:00:00

    [6] Processing binary instrumentation...
        [Before] D:\Koo\Repo\ropf\samples\md5\md5.dll (695a4327d412f5e830f69f8acebcb890)
          a. Size of Headers: 0x400
          b. Size of Code*: 0x7600
          c. Size of Image*: 0xe000
          d. Size of Initialized Data*: 0x4400
          e. Size of Uninitialized Data: 0x0
          f. Image Base: 0x10000000
          g. Address of Entry Point: 0x2409
          h. File Alignment: 0x200
          i. Section Alignment: 0x1000
          j. Relocation Size*: 0x6e0
        [After]  D:\Koo\Repo\ropf\samples\md5\md5_ropf.dll (95f670d81f0d3d75367114c611eaa372)
          a. Size of Headers: 0x400
          b. Size of Code*: 0x8000
          c. Size of Image*: 0xf000
          d. Size of Initialized Data*: 0x3800
          e. Size of Uninitialized Data: 0x0
          f. Image Base: 0x10000000
          g. Address of Entry Point: 0x2409
          h. File Alignment: 0x200
          i. Section Alignment: 0x1000
          j. Relocation Size*: 0x6e8

    [7] Evaluating the results...
                    < Gadget Summary >
        --------------------------------------------
                  | Unintended | Intended  |   Sum
         Broken   |    1061    |     729   |   1790
         Remained |       9    |      58   |     67
         Red Area |     100    |      57   |    157
        --------------------------------------------
         Total    |    1170    |     844   |   2014
        --------------------------------------------
        Broken gadgets: 1790 (96.39%, 88.88%)
        Remaining gadgets: 67 (3.61%, 3.33%)
            [Case 1] Entry (the longest/intended) gadgets:     18
            [Case 2] Block or opcode not addressed:            15
            [Case 3] Gad_start < text(code) section:           0
            [Case 4] Size of block is too small to move (<5B): 34
        Call-preceded gadgets
            Total: 87 (4.68%, 4.32%)
            In red: 1 (0.05%, 0.05%)
            Remained after processing: 5 (0.27%, 0.25%)

                    < Coverage between Disp and Rand >
        |<-----  (D)isp ( 1555, 83.7%)  ----->|
        |-------------------|-----------------|------------------|
        |++++++ [D-R] ++++++|+=+=+ [D&R] +=+=+|====== [R-D] =====|
        |++++++  380 +++++++|+=+=+ 1175 +=+=+=|======  235 ======|
        |++++( 263/ 117)++++|+++( 731/ 444)+++|++++(  67/ 168)+++|
        |+++++++++++++++++++|+=+=+=+=+=+=+=+=+|==================|
        |-------------------|-----------------|------------------|
                            |<-----  (R)and ( 1410, 75.9%) ----->|

        Total gadgets: 1857 (2014 with reds)
            D+R:  1790 [ 1061/  729] (96.39%, 88.88%)
            D-R:   380 [  263/  117] (20.46%, 18.87%)
            R-D:   235 [   67/  168] (12.65%, 11.67%)
            D&R:  1175 [  731/  444] (63.27%, 58.34%)
        Inserted jump instructions: 99
            Single:   45 (45.45%)
            Pair:     54 (54.55%)
        Increased size of new binary: 45568B -> 48128B (5.62%)

    [8] Finalizing...
        The requested operation took 7.671 sec(s) in total!
        All stats are saved into  ./stats/new_stats.csv


- With IDA Pro

  First, make sure that the IDA Pro directory where its main executables reside
  is included in PATH. Try to execute idaq.exe from a command prompt to test it.

  Also, in case IDA Pro uses a different python version than the one previously
  installed, you will need to install all the prerequisites for that version
  too. You choose which Python version to use from the command prompt using
  absolute paths.

  Orp can be used with IDA Pro in two ways:

  1. CFG extraction with [-d]
      Analyze files other than the ones included in the test directory. To do so,
      you have to extract the control-flow graph:
       > python orp.py -d path/to/dll/or/exe
      This uses IDA Pro internally. The CFG will be dumped in a file with the same
      name as the input, plus the '.dmp.bz2' suffix. Then, you can run any of the
      above modes of execution: randomization, coverage, or exploit evaluation.

  2. Standalone IPR test
      Most of Orp's scripts can be used directly as standalone IDA Python scripts
      from the main window of IDA Pro. These are:

      gadget.py   Find gadgets between cursor position and end of function
      equiv.py    Find equivalent instructions between cursor and end of function
      preserv.py  Find preserved registers in the function under the cursor
      reorder.py  Reorder the instructions in the basic block under the cursor
      swap.py     Find swappable registers in the function under the cursor

      Some of them require the cursor to be on the beginning of a function. For more
      information check their main functions at the bottom of each script.


- Some Comments and Known Issues

  1. No consistent result file for displacement
     The .ropf section contains multiple code snippets which displacement has been
     applied to. However, every single run, you will get a different executable that
     the locations of displaced codes are shuffled. Mathematically the number of all
     possible cases would be n! where n is the number of code snippets to be displaced.

  2. *_ropf.dll and *_ropf_final.dll
     If the executable (dll or exe) has a relocation section, the final binary would be
     *_ropf_final.dll. This is because pefile does not allow one to alter the relocation
     section. Just ignore *_ropf.dll if you see both files.

  3. Large input
     Memory error that can't be handled in python has been observed in case of large
     file size as input from time to time.

  4. Failure of relocation table
     You might encounter the following message without having a randomized binary.
      "The size of adjusted relocation is larger than that of original one"
     It stems from the size discrepancy due to metadata while writing new relocation
     section, although the case is quite rare. Note that the number of relocation
     entries stays identical at all times.